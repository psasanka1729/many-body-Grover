#! /usr/bin/env python

import subprocess
import numpy

# Some basic data for the lawrencium partitions: see https://sites.google.com/a/lbl.gov/
# high-performance-computing-services-group/lbnl-supercluster/lawrencium
partition_info=['mako','mako_normal',8] # = [partition,qos,ncores]
# partition_info=['lr2','lr_normal',12] # = [partition,qos,ncores]

#Log the current submission
logstr='''RUNNUMBER:



Codebase: 
Cluster: lrc
gittag: '''

#Do the git-ing
cmd='git commit -a -m "Commit before run RUNNUMBER" > /dev/null'
print cmd
subprocess.call(cmd,shell=True)

cmd='gittag.py > temp.temp'
subprocess.call(cmd,shell=True)
logstr+=open('temp.temp','r').readline()
subprocess.call('rm temp.temp',shell=True)

#subprocess.call('mkdir -p ../log_files/',shell=True)
open('RUNNUMBER.log','w').write(logstr)

#Setup the versionmap and qsub files
vmap_file=open('versionmap.dat','w')
vmap_file.write('vnum\tL\n')

task_file=open('RUNNUMBER.task','w')

template_file='RUNNUMBER.template'
template_contents=open(template_file,'r').read()

vnum=0

for L in xrange(8):
	qsub_file=template_file.replace('.template','_'+str(vnum)+'.qsub')
	fout=open(qsub_file,'w')

	contents=template_contents.replace('###',str(vnum))
	contents=contents.replace('*LLL*',str(L))
	vmap_file.write(str(vnum)+'\t'+str(L)+'\n')
	task_file.write('bash RUNNUMBER_'+str(vnum)+'.qsub\n')
	fout.write(contents)
	fout.close()
	
	vnum+=1
	

# Finally output task and sbatch files, padding appropriately	
n_core=partition_info[2]
if vnum % n_core != 0:
    vnum_orig=vnum+0
    vnum=(vnum_orig/n_core+1)*n_core
    print 'Warning: The number of processors is not a multiple of '+str(n_core)
    print 'Padding the task file from '+str(vnum_orig)+' to '+str(vnum)
    task_file.close()
    task_contents=open('RUNNUMBER.task','r').read()
    task_file=open('RUNNUMBER.task','w')
    
    n_node=vnum/n_core
    fake_cnt=numpy.zeros((n_node),dtype=int)
    n_fake=vnum-vnum_orig
    for j in xrange(n_fake):
        fake_cnt[j%n_node]+=1
    
    curr_cnt=0
    curr_node=0
    for line in task_contents.split('\n'):
        if curr_cnt%n_core==0 and curr_node < len(fake_cnt):
            for j in xrange(fake_cnt[curr_node]):
                task_file.write('echo "Fake run"\n')
                curr_cnt+=1
            curr_node+=1
        task_file.write(line+'\n')
        curr_cnt+=1

contents=open('RUNNUMBER.sbatch.template','r').read()
contents=contents.replace('*nnn*',str(vnum)) # The total number of processors
contents=contents.replace('*ttt*','12:00:00') # The wall clock time per processor
contents=contents.replace('*partition*',partition_info[0]) # The total number of processors
contents=contents.replace('*qos*',partition_info[1]) # The total number of processors
open('RUNNUMBER.sbatch','w').write(contents)
